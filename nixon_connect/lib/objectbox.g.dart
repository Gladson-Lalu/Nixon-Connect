// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Models/room_message.dart';
import 'Models/room_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1735908140870699501),
      name: 'RoomMessage',
      lastPropertyId: const IdUid(7, 7434389742705426507),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3734475559558429154),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3076214040818428117),
            name: 'messageId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 7137591203405702161)),
        ModelProperty(
            id: const IdUid(3, 1948727493622236540),
            name: 'message',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 667486135750535979),
            name: 'sender',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4433085714077161517),
            name: 'room',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3154689605823494400),
            name: 'createdAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7434389742705426507),
            name: 'mentions',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 1509511342066053177),
      name: 'RoomModel',
      lastPropertyId: const IdUid(17, 7317498931347203851),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 360830790785066264),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4701579218463970443),
            name: 'roomName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1249795997590180743),
            name: 'roomType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4370637754889920855),
            name: 'roomDescription',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5146015302506077762),
            name: 'roomPerimeter',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5755442320856292040),
            name: 'roomAvatar',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 295346031455357277),
            name: 'roomRoles',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6744174896417256106),
            name: 'roomPassword',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1148907703586434698),
            name: 'roomHost',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3527341030608662172),
            name: 'roomId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(5, 2504010480950733106)),
        ModelProperty(
            id: const IdUid(13, 8448068255158368123),
            name: 'roomMembers',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8132698373525355814),
            name: 'lastMessage',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 8369255689500189870),
            name: 'lastUpdatedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7317498931347203851),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(5, 1509511342066053177),
      lastIndexId: const IdUid(5, 2504010480950733106),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        3115958721637054506,
        6227983685434057435,
        7808324036798933820
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        8046566697929763347,
        4965592237749550932,
        7437087990107253550,
        7528973071144423037,
        4420224901585885660,
        4642968652360808928,
        5582605430815769358,
        6128269777432635214,
        3944500877522460105,
        7084459451917070547,
        82195312187460766,
        1088754300436974548,
        8557503127558974100,
        8152109033694902634,
        6177116594392592246,
        6464102395523987589,
        8164734528772647085,
        3915105084428230336,
        9017631821540589407,
        237459933208696626,
        5162762506435923353,
        9222795448339832018,
        5296611895790657895,
        758714321589326179,
        5600876343881020962,
        7932585979743819974,
        8405993619563326460,
        2261916897571913799,
        7774692077513985002,
        6987756059642695703,
        9191655265717010825,
        1427139948746688969,
        2478055788108129852,
        1383320255578206437,
        6091260732505715409,
        7901383279256449266,
        6403145667134019666,
        3616846064055323266,
        2431309037209524681,
        188145965779919291,
        1022270815194615365,
        4234502077571861056,
        8684863655989848376
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    RoomMessage: EntityDefinition<RoomMessage>(
        model: _entities[0],
        toOneRelations: (RoomMessage object) => [],
        toManyRelations: (RoomMessage object) => {},
        getId: (RoomMessage object) => object.id,
        setId: (RoomMessage object, int id) {
          object.id = id;
        },
        objectToFB: (RoomMessage object, fb.Builder fbb) {
          final messageIdOffset = fbb.writeString(object.messageId);
          final messageOffset = fbb.writeString(object.message);
          final senderOffset = fbb.writeString(object.sender);
          final roomOffset = fbb.writeString(object.room);
          final mentionsOffset = fbb.writeList(
              object.mentions.map(fbb.writeString).toList(growable: false));
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, messageIdOffset);
          fbb.addOffset(2, messageOffset);
          fbb.addOffset(3, senderOffset);
          fbb.addOffset(4, roomOffset);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, mentionsOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RoomMessage(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              messageId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              message: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              sender: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              room: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              createdAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              mentions: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 16, []));

          return object;
        }),
    RoomModel: EntityDefinition<RoomModel>(
        model: _entities[1],
        toOneRelations: (RoomModel object) => [],
        toManyRelations: (RoomModel object) => {},
        getId: (RoomModel object) => object.id,
        setId: (RoomModel object, int id) {
          object.id = id;
        },
        objectToFB: (RoomModel object, fb.Builder fbb) {
          final roomNameOffset = fbb.writeString(object.roomName);
          final roomTypeOffset = fbb.writeString(object.roomType);
          final roomDescriptionOffset = fbb.writeString(object.roomDescription);
          final roomPerimeterOffset = fbb.writeString(object.roomPerimeter);
          final roomAvatarOffset = fbb.writeString(object.roomAvatar);
          final roomRolesOffset = fbb.writeList(
              object.roomRoles.map(fbb.writeString).toList(growable: false));
          final roomPasswordOffset = object.roomPassword == null
              ? null
              : fbb.writeString(object.roomPassword!);
          final roomHostOffset = fbb.writeString(object.roomHost);
          final roomIdOffset = fbb.writeString(object.roomId);
          final roomMembersOffset = fbb.writeList(
              object.roomMembers.map(fbb.writeString).toList(growable: false));
          final lastMessageOffset = fbb.writeString(object.lastMessage);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, roomNameOffset);
          fbb.addOffset(2, roomTypeOffset);
          fbb.addOffset(3, roomDescriptionOffset);
          fbb.addOffset(4, roomPerimeterOffset);
          fbb.addOffset(5, roomAvatarOffset);
          fbb.addOffset(6, roomRolesOffset);
          fbb.addOffset(7, roomPasswordOffset);
          fbb.addOffset(8, roomHostOffset);
          fbb.addOffset(9, roomIdOffset);
          fbb.addOffset(12, roomMembersOffset);
          fbb.addOffset(13, lastMessageOffset);
          fbb.addInt64(15, object.lastUpdatedAt.millisecondsSinceEpoch);
          fbb.addInt64(16, object.createdAt.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RoomModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              roomName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              roomType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              roomDescription: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              roomPerimeter: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              roomPassword: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              roomHost: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              roomAvatar: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              roomRoles:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 16, []),
              roomMembers: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 28, []),
              roomId: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              lastUpdatedAt: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0)),
              createdAt: DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0)),
              lastMessage: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [RoomMessage] entity fields to define ObjectBox queries.
class RoomMessage_ {
  /// see [RoomMessage.id]
  static final id =
      QueryIntegerProperty<RoomMessage>(_entities[0].properties[0]);

  /// see [RoomMessage.messageId]
  static final messageId =
      QueryStringProperty<RoomMessage>(_entities[0].properties[1]);

  /// see [RoomMessage.message]
  static final message =
      QueryStringProperty<RoomMessage>(_entities[0].properties[2]);

  /// see [RoomMessage.sender]
  static final sender =
      QueryStringProperty<RoomMessage>(_entities[0].properties[3]);

  /// see [RoomMessage.room]
  static final room =
      QueryStringProperty<RoomMessage>(_entities[0].properties[4]);

  /// see [RoomMessage.createdAt]
  static final createdAt =
      QueryIntegerProperty<RoomMessage>(_entities[0].properties[5]);

  /// see [RoomMessage.mentions]
  static final mentions =
      QueryStringVectorProperty<RoomMessage>(_entities[0].properties[6]);
}

/// [RoomModel] entity fields to define ObjectBox queries.
class RoomModel_ {
  /// see [RoomModel.id]
  static final id = QueryIntegerProperty<RoomModel>(_entities[1].properties[0]);

  /// see [RoomModel.roomName]
  static final roomName =
      QueryStringProperty<RoomModel>(_entities[1].properties[1]);

  /// see [RoomModel.roomType]
  static final roomType =
      QueryStringProperty<RoomModel>(_entities[1].properties[2]);

  /// see [RoomModel.roomDescription]
  static final roomDescription =
      QueryStringProperty<RoomModel>(_entities[1].properties[3]);

  /// see [RoomModel.roomPerimeter]
  static final roomPerimeter =
      QueryStringProperty<RoomModel>(_entities[1].properties[4]);

  /// see [RoomModel.roomAvatar]
  static final roomAvatar =
      QueryStringProperty<RoomModel>(_entities[1].properties[5]);

  /// see [RoomModel.roomRoles]
  static final roomRoles =
      QueryStringVectorProperty<RoomModel>(_entities[1].properties[6]);

  /// see [RoomModel.roomPassword]
  static final roomPassword =
      QueryStringProperty<RoomModel>(_entities[1].properties[7]);

  /// see [RoomModel.roomHost]
  static final roomHost =
      QueryStringProperty<RoomModel>(_entities[1].properties[8]);

  /// see [RoomModel.roomId]
  static final roomId =
      QueryStringProperty<RoomModel>(_entities[1].properties[9]);

  /// see [RoomModel.roomMembers]
  static final roomMembers =
      QueryStringVectorProperty<RoomModel>(_entities[1].properties[10]);

  /// see [RoomModel.lastMessage]
  static final lastMessage =
      QueryStringProperty<RoomModel>(_entities[1].properties[11]);

  /// see [RoomModel.lastUpdatedAt]
  static final lastUpdatedAt =
      QueryIntegerProperty<RoomModel>(_entities[1].properties[12]);

  /// see [RoomModel.createdAt]
  static final createdAt =
      QueryIntegerProperty<RoomModel>(_entities[1].properties[13]);
}
